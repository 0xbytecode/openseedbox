- Implement some sort of hook system, eg onTorrentAdded, onTorrentStateChange, onTorrentCompleted so CRC32's can be pre-calculated because for large torrents, zip takes way too long to start and sometimes times out
- Make stats at the bottom of the page show Used in general, instead of Used for that group

- Implement node chooser for new torrents

- Better unit tests


Maybe Never:

- Implement deluge or rtorrent backend - transmission is retardedly slow when theres slow hard disks (due to IO thread and RPC thread being the same)

- Implement a "reseller" function that would allow people to use their own nodes and resell OpenSeedbox to their customers. This would need invoicing to work first. Also need the ability to customise the theme etc.
If required, the person should be able to ignore our interface completely and make their own version using our API.




Node Choosing Algorithm
-----------------------

Nodes: 1 (50GB), 2(200GB), 3(120GB)

Note: We dont know the size of the torrent at node choosing time, so we must assume that there is capacity available.
We do know the space sum of all the active torrents on the nodes though.

Add torrent (40GB but we dont know that yet):
Node 1 has 50GB free, Node 2 has 200GB free and Node 3 has 120GB free. None of the nodes have any torrents yet.
Choose Node 2 because its less likely to have problems.

Now: 1 (50GB), 2 (160GB + 1 torrent), 3(120GB)

Add torrent (25GB but we dont know that yet):
Node 2 has a torrent on it but Node 1 and Node 3 dont have any yet. Choose Node 3 because it has more space

Now: 1 (50GB), 2 (160GB + 1 torrent), 3(95GB + 1 torrent)


Basically, choose a node with less torrents on it UNLESS theres nodes with more free space. Otherwise, choose the node with the most free space.

Room for improvement - with the exception of magnet links, find out the torrent size _before_ adding it to transmission. This would allow for algorithms like putting small torrents on nodes with less disk space because you know theres going to be enough available.








